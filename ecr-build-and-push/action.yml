name: Build a docker image and push to ECR
description: |
  Build a docker image and push to ECR. Labels and tags will be configured as per the OCI standards.

inputs:
  aws-ecr-registry:
    description: The AWS ECT registry where the image will be pushed to.
    required: false
    default: registry.equisoft.io
  aws-access-key-id:
    description: An AWS access key ID that has write permissions to the registry.
    required: false
  aws-secret-access-key:
    description: An AWS secret access key that has write permissions to the registry.
    required: false
  aws-region:
    description: AWS region for the registry.
    required: false
  build-args:
    description: Arguments passed to the build command.
    required: false
    default: ""
  dockerfile:
    description: Relative Dockerfile under `working-directory`.
    required: true
    default: Dockerfile
  name:
    description: A simple name for this image
    required: true
  push:
    description: "`true` to push the image to ECR. `false` otherwise (default)."
    required: true
    default: "false"
  version:
    description: The SemVer compatible version for this image, without prefixes.
    required: true
  working-directory:
    description: >-
      Relative path under $GITHUB_WORKSPACE where the project is located.
      This also acts as the context given to the docker build command.
    required: false
    default: "."

runs:
  using: composite
  steps:
    - name: Prepare image data
      id: metadata
      uses: kronostechnologies/actions/docker-metadata@v0.0.17
      with:
        title: ${{ inputs.name }}
        image-name: ${{ inputs.aws-ecr-registry }}/${{ inputs.name }}
        release: ${{ inputs.push }}
        version: ${{ inputs.version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      if: inputs.push == 'true'
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v1
      if: inputs.push == 'true'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        build-args: ${{ inputs.build-args }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        context: ${{ inputs.working-directory }}
        file: ${{ inputs.working-directory }}/${{ inputs.dockerfile }}
        push: ${{ inputs.push == 'true' }}
        tags: ${{ steps.metadata.outputs.tags }}
        labels: ${{ steps.metadata.outputs.labels }}
