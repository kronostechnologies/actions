name: Resolve nodejs application metadata
description: |
  Resolve common application metadata like the application version or whether it is publishable (by our standards).

  Git "history" must be available for this action to perform well. A typical usage will look like so:

  ```yaml
  steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Find application metadata
      id: metadata
      uses: .github/actions/nodejs-application-metadata
  ```

inputs: {}

outputs:
  publishable:
    description: |
      'true' if this build can publish artifacts. Only builds from the default branch can be published.
      'false' if this build should not publish its artifacts.
    value: ${{ steps.metadata.outputs.publishable }}
  is-release:
    description: |
      'true' if this build should create a full release. Only 'publishable' builds can be released. A release is
        typically triggered from a tag matching the 'v1.2.3', semver format.
      'false' if this build should not create a full release.
    value: ${{ steps.metadata.outputs.is-release }}
  version:
    description: |
      The resolved version that the current build can use.
      The version will usually be semver compliant only for releases.
    value: ${{ steps.metadata.outputs.version }}
  npm-tag:
    description: |
      NPM tag to publish package with.
      Defined on only if publishable
      Released semver tag are qualified as 'latest'
      Default branch is qualified 'snapshot'
    value: ${{ steps.metadata.outputs.npm-tag }}

runs:
  using: composite
  steps:
    - name: Find latest released version
      id: latest
      uses: oprypin/find-latest-tag@v1.1.0
      with:
        repository: ${{ github.repository }}
        releases-only: false
        prefix: v
        regex: '^v\d+\.\d+\.\d+$'
        sort-tags: true

    - name: Find application metadata
      id: metadata
      shell: bash
      run: |
        PUBLISHABLE=false
        IS_RELEASE=false
        VERSION=0.0.0-SNAPSHOT
        DEFAULT_BRANCH=${{ github.event.repository.default_branch }}
        NPM_TAG=

        LATEST_VERSION=${{ steps.latest.outputs.tag }}
        LATEST_VERSION=${LATEST_VERSION#v}
        LATEST_VERSION=${LATEST_VERSION:-0.0.0}

        if [[ "$DEFAULT_BRANCH" == "" ]]; then
          # Schedule triggers have no `github.event` contexts
          DEFAULT_BRANCH="${GITHUB_REF#refs/heads/}"
        fi

        if [[ $GITHUB_REF =~ refs/tags/v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          PUBLISHABLE=$(git merge-base --is-ancestor "$GITHUB_SHA" "origin/$DEFAULT_BRANCH" && echo "true" || echo "false")
          IS_RELEASE="$PUBLISHABLE"
          NPM_TAG=latest
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/tags/} | sed -r 's#/+#-#g')
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          if [ "$DEFAULT_BRANCH" = "$BRANCH" ]; then
            VERSION=${LATEST_VERSION%.*}.$((${LATEST_VERSION##*.} + 1))-snapshot.$(date -u "+%Y%m%d%H%M%S")
            PUBLISHABLE=true
            NPM_TAG=snapshot
          else
            VERSION=branch-$BRANCH
          fi
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi

        echo ::set-output name=is-release::$IS_RELEASE
        echo ::set-output name=publishable::$PUBLISHABLE
        echo ::set-output name=version::$VERSION
        echo ::set-output name=npm-tag::$NPM_TAG
